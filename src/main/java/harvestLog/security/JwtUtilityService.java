package harvestLog.security;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.JwtException;
import io.jsonwebtoken.JwtParser;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.io.Decoders;
import io.jsonwebtoken.io.Encoders;
import io.jsonwebtoken.security.Keys;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Service;

import javax.crypto.SecretKey;
import java.time.Instant;
import java.time.temporal.ChronoUnit;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

@Service
public class JwtUtilityService {
    private static final String ROLE_CLAIM = "role";
    private static final String FARMER_ROLE = "FARMER";
    private final SecretKey key;
    private final JwtParser parser;


    public JwtUtilityService() {
        // our current secret (generated by the below main method)
        String secret = "M0g9JhdFu8bMfnkbywETmTmhtuTI+3XYBt20zQqK4w0=";
        this.key = Keys.hmacShaKeyFor(Decoders.BASE64.decode(secret));
        this.parser = Jwts.parser().verifyWith(key).build();
    }
    
    public static void main(String[] args) {
        // to make a new secret
        //is a Base64-encoded string representing a 256-bit (32-byte) cryptographic key,
        // which is required for HS256 (HMAC-SHA256) signing used by your JWTs.
        System.out.println(Encoders.BASE64.encode(Jwts.SIG.HS256.key().build().getEncoded()));
    }

    // Generate a token with the given username only one role: FARMER
    public String generateToken(String email) {
        return Jwts.builder()
                .subject(email)
                .claim(ROLE_CLAIM,FARMER_ROLE)
                .issuedAt(new Date())
                .expiration(new Date(System.currentTimeMillis() + 24 * 60 * 60 * 1000))//24 hours
                .signWith(key)
                .compact();
    }

     public Claims extractAllClaims(String token) throws JwtException {
        return parser.parseSignedClaims(token).getPayload();
    }

    public String extractUsername(String token) {
        return extractAllClaims(token).getSubject();
    }
    public boolean isTokenValid(String token) {
       try{
           return !isTokenExpired(token);
       } catch (JwtException e) {
           return false;
       }
    }

    private boolean isTokenExpired(String token) throws  JwtException {
        Date expiration = extractAllClaims(token).getExpiration();
        return expiration.before(new Date());
    }
}
